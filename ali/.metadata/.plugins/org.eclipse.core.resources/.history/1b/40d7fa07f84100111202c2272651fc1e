# -*- coding: iso-8859-15 -*-
import MySQLdb
import Clientes
import Facturas
import Productos
import LineaFactura

'''
Created on 30/12/2011

@author: kaos
'''

class Variables:
    '''
    classdocs
    '''
    clientes=[]
    productos=[]
    facturas=[]
    cliente=Clientes.Clientes()
    producto=0
    factura=0
    cliente=0
    seleccionandoClientes=0
    seleccionandoProductos=0
    
    def __init__(self):
        '''
        Constructor
        '''
        Variables.cargarClientes()    #Cargamos clientes
        Variables.cargarProductos()   #Cargamos productos
        Variables.cargarFacturas()    #Cargamos facturas
    @classmethod  
    def cargarClientes(self):
        #Creamos conexion para la base de datos
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        #Obtenemos el un cursor para la base de datos
        cursor=db.cursor()
        #Obtenemos los diferentes nombres para los clientes
        sql='Select nombre from clientes'
        #Ejecutamos la sentencia
        cursor.execute(sql)
        #Obtenemos el resultado
        resultado=cursor.fetchall()
        print 'Nombre de los clientes'
        #definimos la lista de clientes
        Variables.clientes=[]
        #Para cada linea en resultado
        for registro in resultado:
            print 'Cargar usuario'
            #Cargamos el registro
            print registro[0]
            cursor.execute('Select * from clientes where nombre= %s',registro[0])
            resultado2=cursor.fetchall()
            #Obtenemos datos
            idCliente=resultado2[0][0]
            nombreCliente=resultado2[0][1]
            detalleCliente=resultado2[0][2]
            direccionCliente=resultado2[0][3]
            CIFCliente=resultado2[0][4]
            ciudadCliente=resultado2[0][5]
            paisCliente=resultado2[0][6]
            #Creamos un cliente
            cliente = Clientes.Clientes(idCliente,nombreCliente,detalleCliente,direccionCliente,
                              CIFCliente,ciudadCliente,paisCliente)
            #Lo añadimos a la lista
            Variables.clientes.append(cliente)
        print 'Fin de la carga de clientes'
        #Cerramos la conexion
        db.commit()
        db.close()
    @classmethod 
    def getNombresClientes(self):
        
        listaNombres=[]
        
        for cliente in Variables.clientes:
            listaNombres.append(cliente.nombre)
        
        return listaNombres
    
    @classmethod
    def getNombresProductos(self):
        
        listaNombres=[]
        
        for producto in Variables.productos:
            listaNombres.append(producto.nombre)
        
        return listaNombres
    @classmethod 
    def cargarProductos(self):
        #Hacemos lo mismo con los productos
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        cursor=db.cursor()
        sql='Select nombre from Productos'
        cursor.execute(sql)
        resultado=cursor.fetchall()
        Variables.productos=[]
        for registro in resultado:
            print 'Cargando productos'
            print registro[0]
            cursor.execute('Select * from productos where nombre=%s',registro[0])
            resultado2=cursor.fetchall()
            idProducto=resultado2[0][0]
            nombreProducto=resultado2[0][1]
            detalleProducto=resultado2[0][2]
            precioProducto=resultado2[0][3]
            unidadesProducto=resultado2[0][4]
            producto = Productos.Productos(idProducto,nombreProducto,detalleProducto,
                                          precioProducto,unidadesProducto)
            Variables.productos.append(producto)
        print 'Fin de la carga de productos'
        db.commit()
        db.close()
    
    @classmethod 
    def cargarFacturas(self):
        #Mas complicado para las facturas
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        cursor=db.cursor()
        Variables.facturas=[]
        #Para cada uno de los clientes
        for cliente in Variables.clientes:
            #Obtenemos el id del cliente
            idCliente = cliente.idCliente
            #Seleccionamos los id de las facturas que tiene
            cursor.execute('Select idFactura from posee where idCliente=%s',idCliente)
            idFacturas=cursor.fetchall()
            #Para cada factura
            for idFactura in idFacturas:
                #Obtenemos los datos de la factura
                cursor.execute('Select * from Facturas where idFacturas=%s',idFactura[0])
                facturas=cursor.fetchall()
                idFactura=facturas[0][0]
                fechaFactura=facturas[0][1]
                observaciones=facturas[0][2]
                #Creamos una lista, por ahora vacia, para obtener todos los datos de las filas
                lista=[]
                #Seleccionamos todos los detalles de la fila
                cursor.execute('Select idProductos,cantidad,precio,descuento,albaran from contiene where idFacturas=%s',idFactura)
                lineas=cursor.fetchall()
                for linea in lineas:
                    idProducto=linea[0]
                    cantidadProducto=linea[1]
                    precioProducto=linea[2]
                    descuentoProducto=linea[3]
                    albaranProducto=linea[4]
                    #Obtenemos el nombre del producto
                    cursor.execute('Select nombre from productos where idProductos=%s',idProducto)
                    detalleProducto=cursor.fetchall()
                    nombreProducto=detalleProducto[0][0]
                    #Creamos una nueva linea
                    nuevaLinea = LineaFactura.LineaFactura(albaranProducto,nombreProducto
                                                           ,precioProducto,descuentoProducto,cantidadProducto)
                    lista.append(nuevaLinea)
                factura=Facturas.Facturas(idFactura,fechaFactura,observaciones,lista)
                cliente.facturas.append(factura)                           
                Variables.facturas.append(factura)
        db.commit()
        db.close()
    ##fin del cargarFacturas
    
    @classmethod  
    def getCliente(self,nombre):
        
        valor=0
        for cliente in Variables.clientes:
            if(cliente.nombre==nombre):
                valor=cliente
        return valor
    
    @classmethod
    def getProducto(self,nombre):
        
        valor=0
        for producto in Variables.productos:
            if(producto.nombre==nombre):
                valor=producto
        
        return valor
    
    @classmethod
    def getFactura(self,idFactura):
        
        valor=0
        for factura in Variables.facturas:
            if(factura.idFactura==idFactura):
                valor=factura
        
        return valor
    
    @classmethod
    def getClienteId(self,idCliente):
        
        valor=0
        for cliente in Variables.clientes:
            if(cliente.idCliente==idCliente):
                valor=cliente
        
        return valor
    @classmethod
    def getProductoId(self,idProducto):
        valor=0
        for producto in Variables.productos:
            if(producto.idProducto==idProducto):
                valor=producto
        
        return valor
    
    @classmethod  
    def getFacturasEntre(self,nombre,desde,hasta):
        
        listaFacturas=self.getFacturas(nombre)
        
        
        nuevaLista=[]
        
        for factura in listaFacturas:
            if(factura.fecha>=desde and factura.fecha<=hasta):
                nuevaLista.append(factura)
        return nuevaLista
    
    @classmethod  
    def getFacturas(self,nombre):
        
        cliente=self.getCliente(nombre)
        return cliente.getFacturas()
    
    @classmethod
    def eliminarCliente(self,cliente):
        Variables.clientes.remove(cliente)
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        cursor=db.cursor()
        cursor.execute('DELETE FROM clientes WHERE idClientes=%s',cliente.idCliente)
        db.commit()
        db.close()
    
    @classmethod
    def eliminarProducto(self,producto):
        Variables.productos.remove(producto)
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        cursor=db.cursor()
        cursor.execute('DELETE FROM productos WHERE idProductos=%s',producto.idProducto)
    
    @classmethod  
    def modificarCliente(self,cliente):
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        cursor=db.cursor()
        if(cliente.idCliente==""):
            print "Nuevo Cliente"
            cursor.execute('INSERT INTO Clientes(nombre,detalle,direccion,cif,ciudad,pais) VALUES(%s,%s,%s,%s,%s,%s)',(cliente.nombre,cliente.detalles,cliente.direccion,cliente.cif,cliente.ciudad,cliente.pais))
            db.commit()
            Variables.cargarClientes()
        else:
            print "Modificar cliente"
            clienteold=Variables.getClienteId(cliente.idCliente)
            Variables.clientes.remove(clienteold)
            Variables.clientes.append(cliente)
            
            cursor.execute('UPDATE clientes SET nombre=%s,detalle=%s,direccion=%s,cif=%s,ciudad=%s,pais=%s WHERE (idClientes=%s)',(
                           cliente.nombre,cliente.detalles,cliente.direccion,cliente.cif,cliente.ciudad,cliente.pais,cliente.idCliente))
            db.commit()
        db.close()
    
    @classmethod
    def modificarProducto(self,producto):
        db=MySQLdb.connect(host='localhost',user='root',passwd='root',db='mydb')
        cursor=db.cursor()
        if(producto.idProducto==""):
            print "Nuevo Producto"
            precio=float(producto.precio)
            cursor.execute('INSERT INTO Productos(nombre,detalle,precio,unidades) VALUES(%s,%s,%s,%s)',(producto.nombre,producto.detalle,precio,producto.unidades))
            db.commit()
            Variables.cargarProductos()
        else:
            print "Modificar Producto"
            productoold=Variables.getProductoId(producto.idProducto)
            Variables.productos.remove(productoold)
            Variables.productos.append(producto)
            precio=float(producto.precio)
            cursor.execute('UPDATE productos SET nombre=%s,detalle=%s,precio=%s,unidades=%s WHERE (idProductos=%s)',(producto.nombre,producto.detalle,precio,producto.unidades,producto.idProducto))
            db.commit()
        db.close()